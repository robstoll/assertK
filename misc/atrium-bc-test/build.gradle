buildscript {
    ext.publish_description = 'Checks that specs from an older version of Atrium can still be run with the components of the current version.'
}

//Enable if you need to check the task tree
//plugins {
//    id "com.dorongold.task-tree" version "1.3"
//}

repositories {
    maven { url "https://dl.bintray.com/jetbrains/spek" }
    maven { url "https://dl.bintray.com/robstoll/tutteli-jars" }
}

configurations {
    common
}

dependencies {
    common "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    common("org.jetbrains.spek:spek-api:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    common("org.jetbrains.spek:spek-junit-platform-engine:$spek_version") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    common("com.nhaarman:mockito-kotlin:$mockito_kotlin_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    common "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile configurations.common.dependencies
}

def createBcTasks(String apiName, String origVersion, String forgive) {
    def version = origVersion.replaceAll("\\.", "_")
    def name = "${apiName.replaceAll("-", "_")}_$version"
    def srcName = "src_$name"
    def confCommon = "conf_$name"
    def testJar = "testJar_$name"
    def testJarSources = "testJarSources_$name"
    def srcDirectory = file("${project.projectDir}/src/old/$origVersion/atrium-api-$apiName")

    sourceSets {
        create(srcName) {
            java.srcDirs = []
            kotlin.srcDirs = [srcDirectory]
            resources.srcDirs = []
        }
    }

    configurations {
        create(confCommon)
        create(testJar)
        create(testJarSources)
    }

    dependencies {
        add(testJar, "ch.tutteli:atrium-api-$apiName:$origVersion:tests") {
            exclude group: '*'
        }
        add(testJarSources, "ch.tutteli:atrium-api-$apiName:$origVersion:testsources") {
            exclude group: '*'
        }

        add(confCommon, "ch.tutteli:atrium-spec:$origVersion") {
            exclude group: '*'
        }
        add(confCommon, projectPrefixed("api-cc-en_UK")) //required for atrium-spec
        add(confCommon, projectPrefixed("$apiName-robstoll"))
        add(confCommon, sourceSets.main.runtimeClasspath)

        owner."${srcName}Compile" configurations[confCommon].dependencies
    }

    def getArgs = { String scanClassPath ->
        return [
            '--scan-class-path', scanClassPath,
            '--include-engine', 'spek-deprecation',
            '--config', forgive,
            '--details', 'summary'
        ]
    }

    def bbcTask = task("bbc_$name", type: JavaExec, group: 'Verification') {
        description = "Checks if specs from $apiName $origVersion can be run against the current version."

        inputs.files configurations[testJar]
        inputs.files configurations[confCommon]

        classpath configurations[confCommon].asPath
        classpath configurations[testJar].asPath

        main = 'org.junit.platform.console.ConsoleLauncher'
        args = getArgs(configurations[testJar].asPath)
    }
    check.dependsOn bbcTask


    task("unzip_$name") {
        inputs.files configurations[testJarSources]

        outputs.dir srcDirectory
        doLast {
            configurations[testJarSources].asPath.split(",").each {
                def jar = it
                copy {
                    from zipTree(jar)
                    into srcDirectory
                }
            }
        }
    }

    def bcTask = task("bc_$name", type: JavaExec, group: 'Verification') {
        description = "Checks if specs from $apiName $origVersion can be compiled and run against the current version."

        inputs.files sourceSets[srcName].runtimeClasspath

        classpath sourceSets[srcName].runtimeClasspath

        main = 'org.junit.platform.console.ConsoleLauncher'
        args = getArgs(sourceSets[srcName].output.classesDirs.asPath)
    }
    check.dependsOn bcTask
    project."compileSrc_${name}Kotlin".dependsOn "unzip_$name"
}

createBcTasks('cc-de_CH', '0.6.0',
    'forgive=.*spec:ch.tutteli.atrium.api.cc.de_CH.Iterable.*(error cases|failing cases|context empty collection).*'
)
createBcTasks('cc-en_UK', '0.6.0',
    'forgive=.*spec:ch.tutteli.atrium.api.cc.en_UK.Iterable.*(error cases|failing cases|context empty collection).*'
)
createBcTasks('cc-infix-en_UK', '0.6.0',
    'forgive=.*spec:ch.tutteli.atrium.api.cc.infix.en_UK.Iterable.*(error cases|failing cases|context empty collection).*'
)
