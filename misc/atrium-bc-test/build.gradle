description = 'Checks that specs from older versions of Atrium can still be run with the components of the current version.'

//Enable if you need to check the task tree
//plugins {
//    id "com.dorongold.task-tree" version "1.3"
//}

repositories {
    maven { url "https://dl.bintray.com/jetbrains/spek" }
}

configurations {
    common
}

dependencies {
    common "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    common("org.jetbrains.spek:spek-api:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    common("org.jetbrains.spek:spek-junit-platform-engine:$spek_version") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    common("com.nhaarman:mockito-kotlin:$mockito_kotlin_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    common "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile configurations.common.dependencies
    compile prefixedProject('core-api')
}

def createBcTasks(String apiName, String version, String forgive) {
    def nameUnderline = "${apiName.replaceAll('-', '_')}_${version.replaceAll("\\.", '_')}"
    def name = "${apiName}-$version"
    def srcName = "src_$nameUnderline"
    def confCommon = "conf_$nameUnderline"
    def testJar = "testJar_$nameUnderline"
    def testJarSources = "testJarSources_$nameUnderline"
    def srcDirectory = file("${project.projectDir}/src/old/$version/atrium-api-$apiName")

    sourceSets {
        create(srcName) {
            java.srcDirs = [] // we don't have java sources
            kotlin.srcDirs = [srcDirectory]
            resources.srcDirs = [] //we don't have resources
        }
    }

    configurations {
        create(confCommon)
        create(testJar)
        create(testJarSources)
    }

    dependencies {
        add(testJar, "ch.tutteli:atrium-api-$apiName:$version:tests") {
            exclude group: '*'
        }
        add(testJarSources, "ch.tutteli:atrium-api-$apiName:$version:testsources") {
            exclude group: '*'
        }

        add(confCommon, "ch.tutteli:atrium-spec:$version") {
            exclude group: '*'
        }
        add(confCommon, prefixedProject("api-cc-en_UK")) //required for atrium-spec
        add(confCommon, prefixedProject("$apiName-robstoll"))
        add(confCommon, sourceSets.main.runtimeClasspath)

        owner."${srcName}Compile" configurations[confCommon].dependencies
    }

    def getArgs = { String scanClassPath ->
        return [
            '--scan-class-path', scanClassPath,
            '--include-engine', 'spek-deprecation',
            '--config', forgive,
            '--details', 'summary'
        ]
    }

    def bbcTask = task("bbc-$name", type: JavaExec, group: 'Verification') {
        description = "Checks if specs from $apiName $version can be run against the current version."

        inputs.files configurations[testJar]
        inputs.files configurations[confCommon]

        classpath configurations[confCommon].asPath
        classpath configurations[testJar].asPath

        main = 'org.junit.platform.console.ConsoleLauncher'
        args = getArgs(configurations[testJar].asPath)
    }
    check.dependsOn bbcTask


    def unzip = task("unzip-$name") {
        inputs.files configurations[testJarSources]

        outputs.dir srcDirectory
        doLast {
            configurations[testJarSources].each {
                def jar = it
                copy {
                    from zipTree(jar)
                    into srcDirectory
                }
            }
        }
    }

    def bcTask = task("bc-$name", type: JavaExec, group: 'Verification') {
        description = "Checks if specs from $apiName $version can be compiled and run against the current version."

        inputs.files sourceSets[srcName].runtimeClasspath

        classpath sourceSets[srcName].runtimeClasspath

        main = 'org.junit.platform.console.ConsoleLauncher'
        args = getArgs(sourceSets[srcName].output.classesDirs.asPath)
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "$jacoco_tool_version"
        applyTo bcTask
        applyTo bbcTask
    }

    def jacocoReport = project.task("jacoco-bc-$name", type: JacocoReport) {
        sourceDirectories = sourceSets.main.allJava.sourceDirectories
        classDirectories = files(sourceSets.main.output.classesDirs)
        executionData bcTask
        executionData bbcTask

        sourceDirectories = project.sourceSets.main.allJava.sourceDirectories
        classDirectories = project.sourceSets.main.output.classesDirs

        def projects = apiName.contains('en_UK') ?
            jacocoMulti.sourceProjects :
            jacocoMulti.sourceProjects -
                prefixedProject('translations-en_GB') -
                prefixedProject('translations-en_UK-deprecated') +
                prefixedProject('translations-de_CH') +
                prefixedProject('translations-de_CH-deprecated')

        projects.each {
            sourceDirectories += it.sourceSets.main.allJava.sourceDirectories
            classDirectories += it.sourceSets.main.output.classesDirs
        }

        reports {
            csv.enabled = false
            xml.enabled = true
            xml.destination file("${buildDir}/reports/jacoco/bc-$name/report.xml")
            html.enabled = true
            html.destination file("${buildDir}/reports/jacoco/bc-$name/html/")
        }
    }

    check.dependsOn jacocoReport

    check.dependsOn bcTask
    project."compileSrc_${nameUnderline}Kotlin".dependsOn unzip
}

def createBcTasksForApis(String version, String forgive, String... apis) {

    def bc_version = task("bc-$version", group: 'Verification')
    def bbc_version = task("bbc-$version", group: 'Verification')

    apis.each { apiName ->
        createBcTasks(apiName, version, forgive)
        bc_version.dependsOn "bc-${apiName}-$version"
        bbc_version.dependsOn "bbc-${apiName}-$version"
    }
}

createBcTasksForApis('0.6.0',
    'forgive=.*ch\\.tutteli\\.atrium\\.api\\.cc\\.(de_CH|en_UK|infix\\.en_UK)\\.(' +
        '(Iterable.*(error cases|failing cases|context empty collection).*)|' +
        '(IterableContainsNotAssertionsSpec.*:(enthaeltNicht|containsNot|notTo contain) 4.0 throws AssertionError.*)|' +
        '(IterableContainsInAnyOrderNotOrAtMostObjectsAssertionsSpec.*:(' +
            '((enthaelt|contains|to contain) 5.0 (nichtOderHoechstens|notOrAtMost) once throws AssertionError)|' +
            '((enthaelt|contains|to contain) 5.0 and 4.0 (nichtOderHoechstens|notOrAtMost) twice throws AssertionError)' +
        ').*)|' +
        '(IterableContainsInAnyOrderExactlyObjectsAssertionsSpec.*:(' +
            '((enthaelt|contains|to contain) 5.0 (genau|exactly) 3 times throws AssertionError)|' +
            '((enthaelt|contains|to contain) 5.0 and 4.0 (genau|exactly) twice throws AssertionError)|' +
            '((enthaelt|contains|to contain) 5.0 and 4.0 (genau|exactly) 3 times throws AssertionError)' +
        ').*)|' +
        '(IterableContainsInAnyOrderAtMostObjectsAssertionsSpec.*:(enthaelt|contains|to contain) 5.0 and 4.0 (hoechstens|atMost) twice throws AssertionError.*)|' +
        '(IterableContainsInAnyOrderAtLeastObjectsAssertionsSpec.*:(' +
            '((enthaelt|contains|to contain) 5.0 in any order (zumindest|atLeast) 3 times throws AssertionError)|' +
            '((enthaelt|contains|to contain) 5.0 and 4.0 in any order (zumindest|atLeast) 3 times throws AssertionError)|' +
            '((enthaelt|contains|to contain) 5.0 and 4.0 (zumindest|atLeast) once (aberHoechstens|butAtMost) twice throws AssertionError)|' +
            '((enthaelt|contains|to contain) 5.0 and 4.0 (zumindest|atLeast) 3 times (aberHoechstens|butAtMost) 4 times throws AssertionError)' +
        ').*)|' +
        '(CharSequenceContainsNotOrAtMostAssertionsSpec.*:(' +
            '((enthaelt|contains|to contain) \'o\' (nichtOderHoechstens|notOrAtMost) once throws AssertionError)|' +
            '((enthaelt|contains|to contain) \'o\' and \'l\' (nichtOderHoechstens|notOrAtMost) twice throws AssertionError)' +
        ').*)|' +
        '(CharSequenceContainsNotAssertionsSpec.*:(' +
            '((enthaeltNicht|containsNot|notTo contain) \'l\' throws AssertionError)|' +
            '((enthaeltNicht|containsNot|notTo contain) \'H\', \'l\' throws AssertionError)|' +
            '((enthaeltNicht|containsNot|notTo contain) \'l\', \'H\' once throws AssertionError)|' +
            '((enthaeltNicht|containsNot|notTo contain) (ignoriereGrossKleinschreibung|ignoringCase|ignoring case) \'H\', \'l\' throws AssertionError)' +
        ').*)|' +
        '(CharSequenceContainsExactlyAssertionsSpec.*:(' +
            '((enthaelt|contains|to contain) (ignoriereGrossKleinschreibung|ignoringCase|ignoring case) \'o\' (genau|exactly) twice throws)|' +
            '((enthaelt|contains|to contain) \'o\' (genau|exactly) 3 times throws AssertionError)|' +
            '((enthaelt|contains|to contain) \'o\' and \'l\' (genau|exactly) twice throws AssertionError)|' +
            '((enthaelt|contains|to contain) \'o\' and \'l\' (genau|exactly) 3 times throws AssertionError)' +
        ').*)|' +
        '(CharSequenceContainsContainsNotAssertionsSpec.*:(enthaelt|contains|contains Values) \'hello\' and \'robert\' throws AssertionError.*)|' +
        '(CharSequenceContainsAtMostAssertionsSpec.*:(' +
            '((enthaelt|contains|to contain) (ignoriereGrossKleinschreibung|ignoringCase|ignoring case) \'o\' (hoechstens|atMost) twice throws AssertionError )|' +
            '((enthaelt|contains|to contain) \'o\' and \'l\' (hoechstens|atMost) twice throws AssertionError)' +
        ').*)|' +
        '(CharSequenceContainsAtLeastAssertionsSpec.*:(' +
            '((enthaelt|contains|to contain) \'o\' (zumindest|atLeast) 3 times throws AssertionError)|' +
            '((enthaelt|contains|to contain) \'o\' and \'l\' (zumindest|atLeast) 3 times throws AssertionError)|' +
            '((enthaelt|contains|to contain) \'o\' and \'l\' (zumindest|atLeast) once (aberHoechstens|butAtMost) twice throws AssertionError)|' +
            '((enthaelt|contains|to contain) \'o\' and \'l\' (zumindest|atLeast) 3 times (aberHoechstens|butAtMost) 4 times throws AssertionError)' +
        ').*)|' +
        '(CharSequenceAssertionsSpec.*:(' +
            '((enthaeltStandardUebersetzungVon|containsDefaultTranslationOf|contains DefaultTranslationsOf) HELLO and WELCOME, throws AssertionError)|' +
            '((enthaeltNichtDieStandardUebersetzungVon|containsNotDefaultTranslationOf|containsNot DefaultTranslationsOf) HELLO and WELCOME, throws AssertionError)|' +
            '(.*can be used in ExplanatoryAssertionGroup and reported without failure.*fun `(' +
                'enthaeltStandardUebersetzungVon|enthaeltNichtDieStandardUebersetzungVon|' +
                'containsDefaultTranslationOf|containsNotDefaultTranslationOf|' +
                '(contains DefaultTranslationsOf)|(containsNot DefaultTranslationsOf)' +
            ')`)' +
        ').*)|' +
        '(CollectionAssertionsSpec.*(hatDieGroesse|hasSize).*)|' +
        '(BigDecimalAssertionsSpec.*throws UnsupportedOperationException.*)' +
    ')',
    'cc-de_CH', 'cc-en_UK', 'cc-infix-en_UK'
)
