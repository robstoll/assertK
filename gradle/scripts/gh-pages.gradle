apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

def ghPagesPathWithoutVersion = "../${project.name}-gh-pages"
def ghPagesPath = "$ghPagesPathWithoutVersion/$ghPages_version"

task copyIndex(type: Copy) {
    from "$ghPagesPathWithoutVersion/index.version.md"
    into ghPagesPath
    rename('index.version.md', 'index.md')
    expand(version: ghPages_version)
    filteringCharset = 'UTF-8'
}

task copyCSS(type: Copy) {
    from "$ghPagesPathWithoutVersion/style.css"
    into  ghPagesPath
}

task cleanGhPages {
    doFirst { delete ghPagesPath }
}

task ghPages {
    dependsOn cleanGhPages
    dependsOn dokka
    dokka.mustRunAfter cleanGhPages
    finalizedBy copyCSS
    finalizedBy copyIndex
}

dokka {
    moduleName = 'doc'
    outputFormat = 'html'
    outputDirectory = "$ghPagesPathWithoutVersion/$ghPages_version"

    includes = ['misc/kdoc/packages.md']
    jdkVersion = 6

    doFirst {
        println "going to generate kdoc including the projects: ${docProjects*.name}"
        println "====================="
    }
    linkMapping {
        dir = rootProject.projectDir.absolutePath
        url = "$github_url/${dokka_sourceMapping}/"
        suffix = '#L'
    }
    sourceDirs = docProjects.collect { subProject -> file("${subProject.projectDir}/$srcKotlin") }
    [
        "ch.tutteli.atrium.api.cc.de_CH.creating.charsequence.contains.builders.impl",
        "ch.tutteli.atrium.api.cc.de_CH.creating.iterable.contains.builders.impl",
        "ch.tutteli.atrium.domain.builders.reporting.impl",
    ].each { pkg ->
        packageOptions {
            prefix = pkg
            suppress = true
        }
    }
}
