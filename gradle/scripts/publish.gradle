import com.jfrog.bintray.gradle.BintrayPlugin

buildscript {
    ext {
        publish_version = project.version
        publish_groupId = project.group
        publish_artifactId = project.name
        if (project.description == null || project.description.empty) {
            throw new IllegalStateException("no description defined for project $project.name")
        }
        publish_description = project.description
    }
}

logger.info("setting up bintray publishing for $project, $publish_groupId:$publish_artifactId:$publish_version")
logger.info("publish_description: $publish_description")
logger.info("publish_artifacts: $publish_artifacts\n")

buildscript {
    ext {
        publish_license_name = findProperty('publish_license_name') ?: 'Apache-2.0'
        publish_license_description = findProperty('publish_license_description') ?: 'The Apache Software License, Version 2.0'
        publish_license_url = findProperty('publish_license_url') ?: 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        publish_license_distribution = findProperty('publish_license_distribution') ?: 'repo'

        publish_dev_id = findProperty('publish_dev_id') ?: 'robstoll'
        publish_dev_name = findProperty('publish_dev_name') ?: 'Robert Stoll'
        publish_dev_email = findProperty('publish_dev_email') ?: 'rstoll@tutteli.ch'

        publish_repo = findProperty('publish_repo') ?: 'tutteli-jars'
        publish_pkg_name = findProperty('publish_pkg_name') ?: publish_artifactId
        publish_manifest_includeTime = findProperty('publish_manifest_includeTime')
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
    }
}

apply plugin: BintrayPlugin
apply plugin: 'maven-publish'


def pomConfig = {
    licenses {
        license {
            name publish_license_description
            url publish_license_url
            distribution publish_license_distribution
        }
    }
    developers {
        developer {
            id publish_dev_id
            name publish_dev_name
            email publish_dev_email
        }
    }
    scm {
        url publish_vcsUrl
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            publish_artifacts.each {
                artifact it
            }
            groupId publish_groupId
            artifactId publish_artifactId
            version publish_version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', publish_description)
                root.appendNode('url', publish_vcsUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
    key = findProperty('bintrayApiKey') ?: System.getenv('BINGTRAY_API_KEY')
    publications = ['mavenJava']
    pkg {
        repo = publish_repo
        name = publish_pkg_name
        licenses = [publish_license_name]
        vcsUrl = publish_vcsUrl
        version {
            name = publish_version
            desc = "$publish_pkg_name $publish_version"
            released = new Date()
            vcsTag = "v$publish_version"
            gpg {
                sign = true
                passphrase = findProperty('gpgPassphrase') ?: System.getenv('GPG_PASSPHRASE')
            }
        }
    }
}

tasks.withType(Jar) { task ->
    task.manifest {
        attributes \
            'Implementation-Title': publish_artifactId, \
            'Implementation-Version': publish_version, \
            'Implementation-URL': publish_vcsUrl, \
            'Implementation-Kotlin-Version': kotlin_version
    }
}
