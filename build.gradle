buildscript {
    rootProject.version = '0.7.0'
    rootProject.group = 'ch.tutteli.atrium'

    def translationProjects = subprojects.findAll { it.projectDir.path.contains("translations") }
    ext {
        ghPages_version = rootProject.version
        kbox_version = '0.9.0'
        kbox = { "ch.tutteli.kbox:kbox:$kbox_version" }
        kotlin_version = '1.2.50'
        mockito_kotlin_version = '1.5.0'
        mockito = { "com.nhaarman:mockito-kotlin:$mockito_kotlin_version" }
        dokka_version = '0.9.17'
        dokka_sourceMapping = 'tree/v0.7.0'

        //spek.gradle
        jacoco_tool_version = '0.8.1'
        spek_version = '1.1.5'
        junit_platform_version = '1.2.0'

        //publish.gradle
        bintray_version = '1.7.3'
        publish_pkg_name = rootProject.name
        github_url = "https://github.com/robstoll/${rootProject.name}"
        publish_vcsUrl = "${github_url}.git"

        srcKotlin = 'src/main/kotlin'

        //gh-pages.gradle
        docProjects = subprojects.findAll { !it.name.contains("robstoll") && it.name != "${rootProject.name}-spec"}

        //jacoco-multi-project.gradle
        def deprecatedProjects = subprojects.findAll { it.name.endsWith("-deprecated") }
        jacocoMulti = [
            sourceProjects:
                (subprojects - deprecatedProjects).findAll {
                    // would have two classes with the same name if we add it as project as well,
                    // (clashes with "${project.name}-translations-en_GB"
                    it.name != "${rootProject.name}-translations-de_CH" &&
                        // does not make sense to listen specs in coverage
                        it.name != "${rootProject.name}-spec"
                },
            jacocoProjects:
                (subprojects - deprecatedProjects - translationProjects).findAll {
                    it.name != "${rootProject.name}-domain-api" &&
                        it.name != "${rootProject.name}-domain-robstoll" &&
                        it.name != "${rootProject.name}-core-robstoll" &&
                        it.name != "${rootProject.name}-spec" &&
                        it.name != "${rootProject.name}-bc-test" &&
                        //TODO remove with 1.0.0
                        it.name != "${rootProject.name}-assertions" &&
                        it.name != "${rootProject.name}-core-api-deprecated" &&
                        it.name != "${rootProject.name}-core-robstoll-deprecated" &&
                        it.name != "${rootProject.name}-domain-api-deprecated" &&
                        it.name != "${rootProject.name}-translations-de_CH-deprecated" &&
                        it.name != "${rootProject.name}-translations-en_UK-deprecated"
                }
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:$gradle.ext.tutteli_plugins_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("ch.tutteli:tutteli-gradle-spek:$gradle.ext.tutteli_plugins_version")
    }
}

apply plugin: "ch.tutteli.project.utils"

repositories {
    mavenCentral()
}

subprojects { subproject ->
    subproject.version = rootProject.version
    subproject.group = rootProject.group

    repositories {
        mavenCentral()
        maven { url "https://dl.bintray.com/robstoll/tutteli-jars" }
    }

    apply plugin: 'ch.tutteli.kotlin'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    apply plugin: 'org.jetbrains.dokka'

    dokka {
        outputFormat = 'html'
        outputDirectory = "${subproject.buildDir}/kdoc"

        linkMapping {
            dir = rootProject.projectDir.absolutePath
            url = "$github_url/${dokka_sourceMapping}/"
            suffix = '#L'
        }

        if (!rootProject.version.endsWith("-SNAPSHOT")) {
            externalDocumentationLink {
                url = new URL("https://robstoll.github.io/atrium/${rootProject.version}/doc/")
            }
        }
    }

    def sourceJar = task('sourceJar', type: Jar) {
        from subproject.sourceSets.main.allSource
        classifier = 'sources'
    }

    def javadocJar = task('javadocJar', type: Jar, dependsOn: dokka) {
        from dokka.outputDirectory
        classifier = 'javadoc'
    }

    subproject.ext.publish_artifacts = [sourceJar, javadocJar]

    if (subproject.name.startsWith("${rootProject.name}-api")) {
        def testJar = task('testJar', type: Jar) {
            from sourceSets.test.output
            classifier = 'tests'
        }

        def testSourceJar = task('testSourceJar', type: Jar) {
            from sourceSets.test.allSource
            classifier = 'testsources'
        }
        subproject.ext.publish_artifacts += [testJar, testSourceJar]
    }
}

// has to be after the above two blocks which define `it.ext.publish_artifacts`
def bundleSmokeTests = subprojects.findAll{ x -> x.name.endsWith('smoke-test')}
configure(subprojects - bundleSmokeTests) { subproject ->
    afterEvaluate {
        apply from: "${rootProject.projectDir}/gradle/scripts/publish.gradle", to: subproject

        def includeBuildTime = task('includeBuildTime') {
            doLast {
                project.tasks.withType(Jar) { jarTask ->
                    jarTask.manifest {
                        attributes('Build-Time': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'))
                    }
                }
            }
        }

        task publishBintray {
            dependsOn includeBuildTime
            dependsOn bintrayUpload
            bintrayUpload.mustRunAfter(includeBuildTime)
        }
    }
}

configure(subprojects - jacocoMulti.jacocoProjects) {
    dependencies {
        compile kotlinStdLib()
        compile kotlinReflect()
    }
}
configure(jacocoMulti.jacocoProjects) {

    apply plugin: 'ch.tutteli.spek'

    dependencies {
        testCompile mockito(), withoutKotlin
    }

    afterEvaluate { subproject ->
        junitjacoco {

            jacoco {
                toolVersion = jacoco_tool_version
            }

            jacocoReport {
                if (project.hasProperty('jacoco_additional')) {
                    project.jacoco_additional.each {
                        sourceDirectories += it.sourceSets.main.allJava.sourceDirectories
                        classDirectories += it.sourceSets.main.output.classesDirs
                    }
                }
                reports {
                    html.enabled = true
                }
            }
        }
    }
}

apply from: 'gradle/scripts/gh-pages.gradle'

if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
    subprojects {
        def srcModule = "src/module"
        def moduleInfo = file("${project.projectDir}/$srcModule/module-info.java")
        if (moduleInfo.exists()) {

            sourceSets {
                module {
                    java {
                        srcDirs = [srcModule]
                        compileClasspath = main.compileClasspath
                        sourceCompatibility = '9'
                        targetCompatibility = '9'
                    }
                }
                main {
                    kotlin { srcDirs += [srcModule] }
                }
            }

            compileModuleJava.configure {
                dependsOn compileKotlin
                destinationDir = compileKotlin.destinationDir
                doFirst {
                    options.compilerArgs = ['--module-path', classpath.asPath,]
                    classpath = files()
                }
            }
            jar.dependsOn compileModuleJava
        }
    }
}

configure(bundleSmokeTests) {
    def bundleUnderTest = it.name.substring(0, it.name.indexOf('-smoke-test'))
    def bundle = project(":$bundleUnderTest")
    description = "Represents a JDK9 smoke test for $bundleUnderTest"

    sourceCompatibility = '9'
    targetCompatibility = '9'

    ext.jacoco_additional = [bundle]

    sourceSets {
        //we are reusing the source from the bundle, so that we do not have to re-invent the spec
        test { kotlin { srcDirs += ["${bundle.projectDir}/src/test/kotlin"] } }
    }

    dependencies {
        //I don't see how to set up compileTestKotlin with --patch-module, so we have put the module-info.java directly in src/test/kotlin instead
        testCompile bundle
        testCompile prefixedProject('verbs')
    }


}

/*

Release & deploy a commit
--------------------------------
1. change rootProject.version in build.gradle to X.Y.Z
2. update master:
    a) point to the tag
        1) search for old version and replace with new (gradle, maven and section own assertion verb in README.md)
        2) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        3) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
        4) search for `latest#/doc` and replace with `X.Y.Z/doc` (README.md and differences.md)
        5) Remove the warning in README.md about taking a sneak peak (copy it, well be added afterwards)
    b) Update REAMDE -> Use own Assertion Verbs -> link to atriumVerbs if it changed
    c) commit & push (modified build.gradle, README.md and differences.md)
3. update github pages:
    a) gr ghPages
    b) change version number in atrium-gh-pages/latest/index.html
    c) add new version to atrium-gh-pages/README.md
    d) commit & push changes
4. deploy to bintray:
    a) gr clean publishBintray
    b) Log in to bintray, check and publish new jars
5. create release on github
    a) git tag vX.Y.Z
    b) git push origin vX.Y.Z
    c) Log in to github and create release

Prepare next dev cycle
-----------------------
1. change rootProject.version in build.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
   c) search for `X.Y.Z/doc` and replace with `latest#/doc`
4. update README
   a) place the warning about taking a sneak peek back into README
   b) update version in the warning to X.Y.Z and update the link as well
3. commit & push changes

*/
