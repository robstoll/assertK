buildscript {
    def translationProjects = subprojects.findAll { it.projectDir.path.contains("translations") }
    ext {
        atrium_version = '0.7.0-SNAPSHOT'
        ghPages_version = atrium_version
        kbox_version = '0.1.0'
        kotlin_version = '1.2.30'
        mockito_kotlin_version = '1.5.0'
        dokka_version = '0.9.14'
        dokka_sourceMapping = 'tree/master'

        //spek.gradle
        jacoco_tool_version = '0.7.9'
        spek_version = '1.1.5'
        junit_platform_version = '1.1.0'

        //publish.gradle
        bintray_version = '1.7.3'
        publish_pkg_name = project.name
        github_url = "https://github.com/robstoll/${project.name}"
        publish_vcsUrl = "${github_url}.git"

        srcKotlin = 'src/main/kotlin'

        //gh-pages.gradle
        docProjects = subprojects.findAll { !it.name.contains("robstoll") }

        //jacoco-multi-project.gradle
        jacocoMulti = [
            sourceProjects:
                subprojects.findAll {
                    // cannot be part of the sources since it would define AnyAssertions and the like twice
                    // (atrium-domain-robstoll already defines it)
                    it.name != "${project.name}-domain-api-late-binding" &&
                        // cannot be part of the sources since it would define CoreFactory twice
                        // (atrium-core-robstoll already defines it)
                        it.name != "${project.name}-core-api-late-binding" &&
                        // would have two classes with the same name if we add it as project as well,
                        // (clashes with "${project.name}-translations-en_UK"
                        it.name != "${project.name}-translations-de_CH" &&
                        // does not make sense to listen specs in coverage
                        it.name != "${project.name}-spec"
                },
            jacocoProjects:
                subprojects.findAll {
                    it.name != "${project.name}-domain-api" &&
                        it.name != "${project.name}-domain-api-late-binding" &&
                        it.name != "${project.name}-domain-robstoll" &&
                        it.name != "${project.name}-core-api" &&
                        it.name != "${project.name}-core-api-late-binding" &&
                        it.name != "${project.name}-core-robstoll" &&
                        it.name != "${project.name}-spec" &&
                        it.name != "${project.name}-bc-test" &&
                        //TODO remove with 1.0.0
                        it.name != "${project.name}-assertions"
                } - translationProjects
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:$gradle.ext.tutteli_plugins_version"
    }
}

apply plugin: "ch.tutteli.project.utils"

project.ext.srcOwnModule = { String name -> "${project.prefixedProject(name).projectDir}/${ext.srcKotlin}" }

repositories {
    mavenCentral()
}

subprojects {
    repositories {
        mavenCentral()
        maven { url "https://dl.bintray.com/robstoll/tutteli-jars" }
    }

    apply plugin: 'kotlin'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    }

    apply plugin: 'org.jetbrains.dokka'

    dokka {
        outputFormat = 'html'
        outputDirectory = "${project.buildDir}/kdoc"
        linkMapping {
            dir = "$srcKotlin"
            url = "$github_url/${dokka_sourceMapping}/${project.name}/$srcKotlin"
            suffix = '#L'
        }
        linkMapping {
            dir = "${rootProject.projectDir}/${project.name}-core-api/$srcKotlin"
            url = "$github_url/${dokka_sourceMapping}/${project.name}-core-api/$srcKotlin"
            suffix = '#L'
        }

        sourceDirs = files(
            srcKotlin,
            srcOwnModule('domain-api'),
            srcOwnModule('domain-api-late-binding'),
            srcOwnModule('core-api'),
            srcOwnModule('core-api-late-binding'))
    }

    def sourceJar = task('sourceJar', type: Jar) {
        from project.sourceSets.main.allSource
        classifier = 'sources'
    }

    def javadocjar = task('javadocJar', type: Jar, dependsOn: dokka) {
        from dokka.outputDirectory
        classifier = 'javadoc'
    }

    it.ext.publish_artifacts = [sourceJar, javadocJar]

    if (it.name.startsWith('atrium-api')) {
        def testJar = task('testJar', type: Jar) {
            from sourceSets.test.output
            classifier = 'tests'
        }

        def testSourceJar = task('testSourceJar', type: Jar) {
            from sourceSets.test.allSource
            classifier 'testsources'
        }
        it.ext.publish_artifacts += [testJar, testSourceJar]
    }
}

def apiProjects = subprojects.findAll { it.name.startsWith('atrium-api') }
configure(apiProjects) {

}

// has to be after the above two blocks which define `it.ext.publish_artifacts`
subprojects {
    afterEvaluate { subproject ->
        subproject.ext {
            publish_artifactId = subproject.name
            publish_version = atrium_version
        }
        apply from: "${rootProject.projectDir}/gradle/scripts/publish.gradle", to: subproject
    }
}

configure(jacocoMulti.jacocoProjects) {


    apply from: "${rootProject.projectDir}/gradle/scripts/spek.gradle"

    dependencies {
        testCompile("com.nhaarman:mockito-kotlin:$mockito_kotlin_version") {
            exclude group: 'org.jetbrains.kotlin'
        }
    }
}


apply from: 'gradle/scripts/jacoco-multi-project.gradle'
apply from: 'gradle/scripts/gh-pages.gradle'

/*

Release & deploy a commit
--------------------------------
1. change atrium_version in build.gradle to X.Y.Z
2. update github pages:
    a) gr ghPages
    b) change version number in atrium-gh-pages/latest/index.html
    c) add new version to atrium-gh-pages/README.md
    d) commit & push changes
3. update master:
    a) point to the tag
        1) search for old version and replace with new (gradle, maven and section own assertion verb in README.md)
        2) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        3) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
        4) search for `latest#/doc` and replace with `X.Y.Z/doc` (README.md and differences.md)
        5) Remove the warning in README.md about taking a sneak peak (copy it, well be added afterwards)
    b) Update REAMDE -> Use own Assertion Verbs -> link to atriumVerbs if it changed
    b) commit (modified build.gradle, README.md and differences.md)
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
4. deploy to bintray:
    a) gr bintrayUpload
    b) Log in to bintray, check and publish new jars
5. create release on github

Prepare next dev cycle
-----------------------
1. change atrium_version in build.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
   c) search for `X.Y.Z/doc` and replace with `latest#/doc`
4. update README
   a) place the warning about taking a sneak peek back into README
   b) update version in the warning to X.Y.Z and update the link as well
3. commit & push changes

*/
